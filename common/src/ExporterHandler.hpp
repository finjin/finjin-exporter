//Copyright (c) 2017 Finjin
//
//This file is part of Finjin Exporter (finjin-exporter).
//
//Finjin Exporter is free software: you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//Finjin Exporter is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with Finjin Exporter.  If not, see <http://www.gnu.org/licenses/>.


#pragma once


//Includes----------------------------------------------------------------------
#include "FinjinSceneSettingsAccessor.hpp"
#include "SceneExportSettings.hpp"
#include "ExportCommandMacros.hpp"
#include "finjin/common/WxStreamingFileFormat.hpp"
#include "AssetClass.hpp"
#include "FinjinSceneDocument.hpp"


//Types-------------------------------------------------------------------------
namespace Finjin { namespace Exporter {

    /**
     * The ExporterHandler class performs the actual export of a scene.
     */
    class ExporterHandler
    {
    public:
        virtual ~ExporterHandler() {}

        /**
         * Initializes the handler.
         * @param fileName [in] - The name of the file to which the scene is being exported.
         * @param exportSelected [in] - Indicates whether just the selected objects are being exported. If false, the
         * entire scene is being exported, as appropriate.
         * @param sceneSettings [in] - The scene settings.
         */
        virtual bool Initialize(AssetClass assetType, const wxString& fileName, bool exportSelected, FinjinSceneSettingsAccessor sceneSettings);

        /**
         * Performs final cleanup.
         */
        virtual void Shutdown() {}

        /**
         * Runs the export.
         * @return If the export was successful, true is returned. Otherwise, false is returned.
         */
        virtual bool RunExport() {return true;}

        /**
         * Runs the specified commands. These are generated by either RunBeforeExportCommands() or RunAfterExportCommands().
         * @param commands [in] - A collection of commands to run.
         */
        virtual void RunExportCommands(const std::vector<wxString>& commands);

    protected:
        void PreparePrefabAssetReference(std::shared_ptr<FinjinSceneDocument_SceneNode> exportedNode);

    protected:
        //Passed to Initialize()
        wxString exportFilePath;
        bool exportSelected;
        FinjinSceneSettingsAccessor sceneSettings;

        /** Scene export settings derived from the scene settings passed to Initialize(). */
        SceneExportSettings sceneExportSettings;

        /** Macros for the current environment. */
        ExportCommandMacros exportCommandMacros;
    };

    /**
     * This class manages file extensions which are in turn matched to an ExporterHandler.
     */
    class ExporterHandlerFactory
    {
    public:
        virtual ~ExporterHandlerFactory() {}

        /** Gets the display name for this factory. */
        virtual const wxString& GetDisplayName() const = 0;

        /** Gets the number of file extensions this factory can handle. */
        virtual int GetExtensionCount() const = 0;

        /**
         * Gets the specified file extension.
         * @param index [in] - Index of the extension to retrieve.
         * @return The extension. This does not contain the leading dot.
         */
        virtual wxString GetExtension(int index) const
        {
            wxString ext;
            GetExtension(index, ext, nullptr);
            return ext;
        }

        /**
         * Gets the specified file extension.
         * @param index [in] - Index of the extension to retrieve.
         * @param extension [out] - The extension. This should not contain the leading dot.
         * @param description [out] - The extension's description. Optional.
         */
        virtual void GetExtension(int index, wxString& extension, wxString* description) const = 0;

        /** Creates the handler corresponding to this factory. */
        virtual ExporterHandler* CreateHandler() = 0;
    };

} }
